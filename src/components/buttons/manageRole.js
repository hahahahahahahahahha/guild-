import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import { checkAdmin } from '../../utils/permissions.js';
import { createErrorEmbed } from '../../utils/embeds.js';

export const customId = 'manage_role';

export async function execute(interaction) {
  // Check if the user has administrator permissions
  if (!await checkAdmin(interaction)) return;

  try {
    // Get the role ID from the custom ID
    const roleId = interaction.customId.split(':')[1];
    
    // Fetch the role
    const role = await interaction.guild.roles.fetch(roleId);
    
    if (!role) {
      return await interaction.update({
        embeds: [createErrorEmbed('–û—à–∏–±–∫–∞', '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.')],
        components: [],
        ephemeral: true
      });
    }
    
    // Create an embed with role information
    const embed = new EmbedBuilder()
      .setTitle(`üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—å—é: ${role.name}`)
      .setColor(role.color || '#3498db')
      .setDescription(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—å—é **${role.name}**`)
      .addFields(
        { name: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª–∏', value: 
          `**ID:** ${role.id}\n` +
          `**–ü–æ–∑–∏—Ü–∏—è:** ${role.position}\n` +
          `**–¶–≤–µ—Ç:** ${role.hexColor}\n` +
          `**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–æ–ª—å—é:** ${role.members.size}\n` +
          `**–£–ø–æ–º–∏–Ω–∞–µ–º–∞—è:** ${role.mentionable ? '‚úÖ' : '‚ùå'}\n` +
          `**–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è:** ${role.hoist ? '‚úÖ' : '‚ùå'}\n` +
          `**–£–ø—Ä–∞–≤–ª—è–µ–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π:** ${role.managed ? '‚úÖ' : '‚ùå'}`
        }
      )
      .setTimestamp();
    
    // Create buttons for role management
    const row1 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`edit_role_name:${role.id}`)
          .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
          .setStyle(ButtonStyle.Primary)
          .setEmoji('‚úèÔ∏è'),
        new ButtonBuilder()
          .setCustomId(`edit_role_color:${role.id}`)
          .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç')
          .setStyle(ButtonStyle.Primary)
          .setEmoji('üé®'),
        new ButtonBuilder()
          .setCustomId(`toggle_role_hoisted:${role.id}`)
          .setLabel(role.hoist ? '–°–∫—Ä—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ' : '–ü–æ–∫–∞–∑–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(role.hoist ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è')
      );
    
    const row2 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`toggle_role_mentionable:${role.id}`)
          .setLabel(role.mentionable ? '–ó–∞–ø—Ä–µ—Ç–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è' : '–†–∞–∑—Ä–µ—à–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji(role.mentionable ? 'üîî' : 'üîï'),
        new ButtonBuilder()
          .setCustomId(`move_role_up:${role.id}`)
          .setLabel('–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö')
          .setStyle(ButtonStyle.Primary)
          .setEmoji('‚¨ÜÔ∏è'),
        new ButtonBuilder()
          .setCustomId(`move_role_down:${role.id}`)
          .setLabel('–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑')
          .setStyle(ButtonStyle.Primary)
          .setEmoji('‚¨áÔ∏è')
      );
    
    const row3 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`manage_role_permissions:${role.id}`)
          .setLabel('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏')
          .setStyle(ButtonStyle.Primary)
          .setEmoji('üîí'),
        new ButtonBuilder()
          .setCustomId(`delete_specific_role:${role.id}`)
          .setLabel('–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å')
          .setStyle(ButtonStyle.Danger)
          .setEmoji('üóëÔ∏è')
      );
    
    const row4 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('view_roles')
          .setLabel('–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('‚óÄÔ∏è')
      );
    
    // Update the message with the new embed and components
    await interaction.update({
      embeds: [embed],
      components: [row1, row2, row3, row4],
      ephemeral: true
    });
  } catch (error) {
    console.error('Error in manageRole:', error);
    
    await interaction.update({
      embeds: [createErrorEmbed('–û—à–∏–±–∫–∞', `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª—å—é: ${error.message}`)],
      components: [
        new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId('view_roles')
              .setLabel('–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π')
              .setStyle(ButtonStyle.Secondary)
              .setEmoji('‚óÄÔ∏è')
          )
      ],
      ephemeral: true
    });
  }
}