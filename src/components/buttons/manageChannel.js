import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ChannelType } from 'discord.js';
import { checkAdmin } from '../../utils/permissions.js';
import { createErrorEmbed } from '../../utils/embeds.js';

export const customId = 'manage_channel';

// Helper function to get channel type name
function getChannelTypeName(type) {
  const typeMap = {
    [ChannelType.GuildText]: '–¢–µ–∫—Å—Ç–æ–≤—ã–π',
    [ChannelType.GuildVoice]: '–ì–æ–ª–æ—Å–æ–≤–æ–π',
    [ChannelType.GuildCategory]: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
    [ChannelType.GuildAnnouncement]: '–ù–æ–≤–æ—Å—Ç–Ω–æ–π',
    [ChannelType.GuildForum]: '–§–æ—Ä—É–º',
    [ChannelType.GuildStageVoice]: '–°—Ü–µ–Ω–∞',
    [ChannelType.PublicThread]: '–ü—É–±–ª–∏—á–Ω—ã–π —Ç—Ä–µ–¥',
    [ChannelType.PrivateThread]: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç—Ä–µ–¥',
    [ChannelType.AnnouncementThread]: '–ù–æ–≤–æ—Å—Ç–Ω–æ–π —Ç—Ä–µ–¥'
  };
  
  return typeMap[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
}

// Helper function to get emoji based on channel type
function getChannelTypeEmoji(type) {
  const emojiMap = {
    [ChannelType.GuildText]: 'üí¨',
    [ChannelType.GuildVoice]: 'üîä',
    [ChannelType.GuildCategory]: 'üìÅ',
    [ChannelType.GuildAnnouncement]: 'üì¢',
    [ChannelType.GuildForum]: 'üìã',
    [ChannelType.GuildStageVoice]: 'üé≠',
    [ChannelType.PublicThread]: 'üßµ',
    [ChannelType.PrivateThread]: 'üîí',
    [ChannelType.AnnouncementThread]: 'üì£'
  };
  
  return emojiMap[type] || 'üìù';
}

export async function execute(interaction) {
  // Check if the user has administrator permissions
  if (!await checkAdmin(interaction)) return;

  try {
    // Get the channel ID from the custom ID
    const channelId = interaction.customId.split(':')[1];
    
    // Fetch the channel
    const channel = await interaction.guild.channels.fetch(channelId);
    
    if (!channel) {
      return await interaction.update({
        embeds: [createErrorEmbed('–û—à–∏–±–∫–∞', '–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.')],
        components: [],
        ephemeral: true
      });
    }
    
    // Get parent category if exists
    let parentCategory = null;
    if (channel.parentId) {
      parentCategory = await interaction.guild.channels.fetch(channel.parentId);
    }
    
    // Create an embed with channel information
    const embed = new EmbedBuilder()
      .setTitle(`${getChannelTypeEmoji(channel.type)} –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º: ${channel.name}`)
      .setColor('#3498db')
      .setDescription(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º **${channel.name}**`)
      .addFields(
        { name: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ', value: 
          `**ID:** ${channel.id}\n` +
          `**–¢–∏–ø:** ${getChannelTypeName(channel.type)}\n` +
          `**–ü–æ–∑–∏—Ü–∏—è:** ${channel.position}\n` +
          `**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** ${parentCategory ? parentCategory.name : '–ù–µ—Ç'}\n` +
          (channel.type === ChannelType.GuildText || channel.type === ChannelType.GuildAnnouncement ? 
            `**–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º:** ${channel.rateLimitPerUser ? `${channel.rateLimitPerUser} —Å–µ–∫.` : '–í—ã–∫–ª—é—á–µ–Ω'}\n` : '') +
          (channel.type === ChannelType.GuildVoice || channel.type === ChannelType.GuildStageVoice ? 
            `**–ë–∏—Ç—Ä–µ–π—Ç:** ${channel.bitrate / 1000} –ö–±–∏—Ç/—Å\n` +
            `**–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** ${channel.userLimit || '–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω'}\n` : '')
        }
      )
      .setTimestamp();
    
    // Create buttons for channel management
    const row1 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`edit_channel_name:${channel.id}`)
          .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
          .setStyle(ButtonStyle.Primary)
          .setEmoji('‚úèÔ∏è'),
        new ButtonBuilder()
          .setCustomId(`edit_channel_topic:${channel.id}`)
          .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
          .setStyle(ButtonStyle.Primary)
          .setEmoji('üìù'),
        new ButtonBuilder()
          .setCustomId(`edit_channel_category:${channel.id}`)
          .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
          .setStyle(ButtonStyle.Primary)
          .setEmoji('üìÅ')
      );
    
    const row2 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`move_channel_up:${channel.id}`)
          .setLabel('–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö')
          .setStyle(ButtonStyle.Primary)
          .setEmoji('‚¨ÜÔ∏è'),
        new ButtonBuilder()
          .setCustomId(`move_channel_down:${channel.id}`)
          .setLabel('–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑')
          .setStyle(ButtonStyle.Primary)
          .setEmoji('‚¨áÔ∏è')
      );
    
    // Add channel-specific buttons based on channel type
    if (channel.type === ChannelType.GuildText || channel.type === ChannelType.GuildAnnouncement) {
      row2.addComponents(
        new ButtonBuilder()
          .setCustomId(`edit_slowmode:${channel.id}`)
          .setLabel('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('‚è±Ô∏è')
      );
    } else if (channel.type === ChannelType.GuildVoice || channel.type === ChannelType.GuildStageVoice) {
      row2.addComponents(
        new ButtonBuilder()
          .setCustomId(`edit_user_limit:${channel.id}`)
          .setLabel('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('üë•')
      );
    }
    
    const row3 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`manage_channel_permissions:${channel.id}`)
          .setLabel('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏')
          .setStyle(ButtonStyle.Primary)
          .setEmoji('üîê'),
        new ButtonBuilder()
          .setCustomId(`delete_specific_channel:${channel.id}`)
          .setLabel('–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª')
          .setStyle(ButtonStyle.Danger)
          .setEmoji('üóëÔ∏è')
      );
    
    const row4 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('view_channels')
          .setLabel('–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('‚óÄÔ∏è')
      );
    
    // Update the message with the new embed and components
    await interaction.update({
      embeds: [embed],
      components: [row1, row2, row3, row4],
      ephemeral: true
    });
  } catch (error) {
    console.error('Error in manageChannel:', error);
    
    await interaction.update({
      embeds: [createErrorEmbed('–û—à–∏–±–∫–∞', `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–º: ${error.message}`)],
      components: [
        new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId('view_channels')
              .setLabel('–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤')
              .setStyle(ButtonStyle.Secondary)
              .setEmoji('‚óÄÔ∏è')
          )
      ],
      ephemeral: true
    });
  }
}