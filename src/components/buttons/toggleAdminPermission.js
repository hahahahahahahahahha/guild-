import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionsBitField } from 'discord.js';
import { checkAdmin } from '../../utils/permissions.js';
import { createLoadingEmbed, createErrorEmbed } from '../../utils/embeds.js';

export const customId = 'toggle_admin_permission';

export async function execute(interaction) {
  // Check if the user has administrator permissions
  if (!await checkAdmin(interaction)) return;

  // Get the role ID from the custom ID
  const roleId = interaction.customId.split(':')[1];
  
  // Send a loading message
  await interaction.deferUpdate();
  
  try {
    // Fetch the role
    const role = await interaction.guild.roles.fetch(roleId);
    
    if (!role) {
      return await interaction.editReply({
        embeds: [createErrorEmbed('–û—à–∏–±–∫–∞', '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.')],
        components: [],
        ephemeral: true
      });
    }
    
    // Check if the role currently has administrator permission
    const hasAdminPermission = role.permissions.has(PermissionsBitField.Flags.Administrator);
    
    // Toggle the administrator permission
    let newPermissions;
    if (hasAdminPermission) {
      // Remove the administrator permission
      newPermissions = role.permissions.remove(PermissionsBitField.Flags.Administrator);
    } else {
      // Add the administrator permission
      newPermissions = role.permissions.add(PermissionsBitField.Flags.Administrator);
    }
    
    // Update the role permissions
    await role.setPermissions(newPermissions, `–ò–∑–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${interaction.user.tag}`);
    
    // Create an embed with role permissions information
    const embed = new EmbedBuilder()
      .setTitle(`üîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ —Ä–æ–ª–∏: ${role.name}`)
      .setColor(role.color || '#3498db')
      .setDescription(
        `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∞–≤ –¥–ª—è —Ä–æ–ª–∏ **${role.name}**\n\n` +
        `–ü—Ä–∞–≤–æ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä** ${hasAdminPermission ? '–æ—Ç–∫–ª—é—á–µ–Ω–æ' : '–≤–∫–ª—é—á–µ–Ω–æ'}.`
      )
      .addFields(
        { name: '–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞', value: 
          !hasAdminPermission && role.permissions.has(PermissionsBitField.Flags.Administrator) ? 
            '**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä** (–≤—Å–µ –ø—Ä–∞–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã)' : 
            Object.keys(PermissionsBitField.Flags)
              .filter(perm => role.permissions.has(PermissionsBitField.Flags[perm]))
              .map(perm => `‚Ä¢ ${perm}`)
              .join('\n') || '–ù–µ—Ç –ø—Ä–∞–≤'
        }
      )
      .setTimestamp();
    
    // Create a select menu for permission categories
    const selectRow = new ActionRowBuilder().addComponents(
      interaction.message.components[0].components[0]
    );
    
    // Create buttons for quick actions
    const row1 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`reset_role_permissions:${roleId}`)
          .setLabel('–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∞')
          .setStyle(ButtonStyle.Danger)
          .setEmoji('üîÑ'),
        new ButtonBuilder()
          .setCustomId(`toggle_admin_permission:${roleId}`)
          .setLabel(!hasAdminPermission ? '–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' : '–í–∫–ª—é—á–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
          .setStyle(!hasAdminPermission ? ButtonStyle.Danger : ButtonStyle.Success)
          .setEmoji('‚ö°')
      );
    
    // Create a back button to return to role management
    const row2 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`manage_role:${roleId}`)
          .setLabel('–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–æ–ª—å—é')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('‚óÄÔ∏è')
      );
    
    // Update the message with the new embed and components
    await interaction.editReply({
      embeds: [embed],
      components: [selectRow, row1, row2],
      ephemeral: true
    });
  } catch (error) {
    console.error('Error in toggleAdminPermission:', error);
    
    // Create an error embed
    const errorEmbed = createErrorEmbed(
      '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}\n` +
      '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
    );
    
    // Update the reply with the error message
    await interaction.editReply({
      embeds: [errorEmbed],
      components: [
        new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId(`manage_role_permissions:${roleId}`)
              .setLabel('–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∞–≤–∞–º–∏')
              .setStyle(ButtonStyle.Secondary)
              .setEmoji('‚óÄÔ∏è')
          )
      ],
      ephemeral: true
    });
  }
}