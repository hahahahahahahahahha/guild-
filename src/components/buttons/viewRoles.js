import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder } from 'discord.js';
import { checkAdmin } from '../../utils/permissions.js';
import { createPanelEmbed } from '../../utils/embeds.js';

export const customId = 'view_roles';

export async function execute(interaction) {
  // Check if the user has administrator permissions
  if (!await checkAdmin(interaction)) return;

  // Fetch all roles from the guild
  const roles = await interaction.guild.roles.fetch();
  
  // Sort roles by position (highest position first)
  const sortedRoles = [...roles.values()].sort((a, b) => b.position - a.position);
  
  // Create an embed to display the roles
  const embed = new EmbedBuilder()
    .setTitle('üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ —Å–µ—Ä–≤–µ—Ä–∞')
    .setColor('#3498db')
    .setDescription('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª—è–º–∏ —Å–µ—Ä–≤–µ—Ä–∞.\n\n**–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**')
    .setTimestamp();
  
  // Filter out @everyone role and roles higher than the bot's highest role
  const botRole = interaction.guild.members.me.roles.highest;
  const availableRoles = sortedRoles.filter(role => 
    !role.managed && 
    role.id !== interaction.guild.id && // Filter out @everyone
    role.position < botRole.position // Filter out roles higher than the bot's highest role
  );
  
  // Create select menu options (limit to 25 due to Discord API limitations)
  const selectOptions = availableRoles.slice(0, 25).map(role => {
    const hexColor = role.hexColor === '#000000' ? 'Default' : role.hexColor;
    return {
      label: role.name,
      description: `–ü–æ–∑–∏—Ü–∏—è: ${role.position} | –¶–≤–µ—Ç: ${hexColor}`,
      value: `manage_role:${role.id}`,
      emoji: 'üëë'
    };
  });
  
  // Create a select menu for role management
  const selectMenu = new StringSelectMenuBuilder()
    .setCustomId('manage_role_select')
    .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
    .addOptions(selectOptions);
  
  const selectRow = new ActionRowBuilder().addComponents(selectMenu);
  
  // Create buttons for role management
  const row = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('create_role')
        .setLabel('–°–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å')
        .setStyle(ButtonStyle.Success)
        .setEmoji('‚ûï'),
      new ButtonBuilder()
        .setCustomId('delete_role')
        .setLabel('–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('üóëÔ∏è'),
      new ButtonBuilder()
        .setCustomId('move_role')
        .setLabel('–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ä–æ–ª—å')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('‚ÜïÔ∏è')
    );
  
  const row2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('role_permissions')
        .setLabel('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('üîí'),
      new ButtonBuilder()
        .setCustomId('bulk_role_operations')
        .setLabel('–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('üìã')
    );
  
  // Create a back button to return to the main panel
  const row3 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('back_to_panel')
        .setLabel('–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('‚óÄÔ∏è')
    );
  
  // Add information about roles to the embed
  let rolesInfo = '';
  let count = 0;
  
  for (const role of sortedRoles) {
    // Skip @everyone role
    if (role.name === '@everyone') continue;
    
    // Limit to 15 roles in the description to avoid it being too long
    if (count >= 15) break;
    
    const hexColor = role.hexColor === '#000000' ? 'Default' : role.hexColor;
    const memberCount = role.members.size;
    
    rolesInfo += `**${role.position}.** ${role.name}\n`;
    rolesInfo += `> –¶–≤–µ—Ç: ${hexColor} | –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${memberCount}\n`;
    rolesInfo += `> –£–ø–æ–º–∏–Ω–∞–µ–º–∞—è: ${role.mentionable ? '‚úÖ' : '‚ùå'} | –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è: ${role.hoist ? '‚úÖ' : '‚ùå'}\n\n`;
    
    count++;
  }
  
  if (sortedRoles.length > 15) {
    rolesInfo += `*...–∏ –µ—â–µ ${sortedRoles.length - 15} —Ä–æ–ª–µ–π*`;
  }
  
  embed.setDescription(`–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª—è–º–∏ —Å–µ—Ä–≤–µ—Ä–∞.\n\n**–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n\n${rolesInfo}`);
  
  // Send the embed with the select menu and buttons
  await interaction.reply({
    embeds: [embed],
    components: [selectRow, row, row2, row3],
    ephemeral: true
  });
}