import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionsBitField } from 'discord.js';
import { checkAdmin } from '../../utils/permissions.js';
import { createErrorEmbed } from '../../utils/embeds.js';

export const customId = 'role_permissions_category_select';

// Helper function to get permission categories
function getPermissionCategories() {
  return [
    {
      name: '–û–±—â–∏–µ –ø—Ä–∞–≤–∞',
      permissions: [
        'ViewChannel', 'CreateInstantInvite', 'ChangeNickname', 'SendMessages', 
        'EmbedLinks', 'AttachFiles', 'AddReactions', 'UseExternalEmojis', 
        'UseExternalStickers', 'ReadMessageHistory', 'Connect', 'Speak', 
        'Stream', 'UseVAD', 'UseApplicationCommands', 'RequestToSpeak',
        'CreatePublicThreads', 'CreatePrivateThreads', 'SendMessagesInThreads'
      ]
    },
    {
      name: '–ü—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
      permissions: [
        'KickMembers', 'BanMembers', 'ManageNicknames', 'ModerateMembers',
        'ManageEvents', 'ManageThreads', 'ManageMessages', 'MuteMembers',
        'DeafenMembers', 'MoveMembers', 'ManageEmojisAndStickers'
      ]
    },
    {
      name: '–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      permissions: [
        'Administrator', 'ManageGuild', 'ManageRoles', 'ManageChannels',
        'ManageWebhooks', 'ViewAuditLog', 'ViewGuildInsights', 'MentionEveryone'
      ]
    }
  ];
}

// Helper function to get permission name in Russian
function getPermissionName(permission) {
  const permissionNames = {
    'ViewChannel': '–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–∞–ª–æ–≤',
    'CreateInstantInvite': '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π',
    'ChangeNickname': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞',
    'SendMessages': '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π',
    'EmbedLinks': '–í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫',
    'AttachFiles': '–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤',
    'AddReactions': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π',
    'UseExternalEmojis': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —ç–º–æ–¥–∑–∏',
    'UseExternalStickers': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤',
    'ReadMessageHistory': '–ß—Ç–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π',
    'Connect': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º',
    'Speak': '–†–∞–∑–≥–æ–≤–æ—Ä –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö',
    'Stream': '–í–∏–¥–µ–æ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è',
    'UseVAD': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ –≥–æ–ª–æ—Å—É',
    'UseApplicationCommands': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π',
    'RequestToSpeak': '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ',
    'CreatePublicThreads': '–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤',
    'CreatePrivateThreads': '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤',
    'SendMessagesInThreads': '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç—Ä–µ–¥–∞—Ö',
    'KickMembers': '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
    'BanMembers': '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
    'ManageNicknames': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞–º–∏',
    'ModerateMembers': '–ú–æ–¥–µ—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
    'ManageEvents': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏',
    'ManageThreads': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–¥–∞–º–∏',
    'ManageMessages': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏',
    'MuteMembers': '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º',
    'DeafenMembers': '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º',
    'MoveMembers': '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
    'ManageEmojisAndStickers': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏ —Å—Ç–∏–∫–µ—Ä–∞–º–∏',
    'Administrator': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    'ManageGuild': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º',
    'ManageRoles': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏',
    'ManageChannels': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏',
    'ManageWebhooks': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞–º–∏',
    'ViewAuditLog': '–ü—Ä–æ—Å–º–æ—Ç—Ä –∂—É—Ä–Ω–∞–ª–∞ –∞—É–¥–∏—Ç–∞',
    'ViewGuildInsights': '–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞',
    'MentionEveryone': '–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ @everyone –∏ @here'
  };
  
  return permissionNames[permission] || permission;
}

export async function execute(interaction) {
  // Check if the user has administrator permissions
  if (!await checkAdmin(interaction)) return;

  try {
    // Get the selected value (format: role_perm_category:roleId:categoryName)
    const selectedValue = interaction.values[0];
    const [_, roleId, ...categoryNameParts] = selectedValue.split(':');
    const categoryName = categoryNameParts.join(':');
    
    // Fetch the role
    const role = await interaction.guild.roles.fetch(roleId);
    
    if (!role) {
      return await interaction.update({
        embeds: [createErrorEmbed('–û—à–∏–±–∫–∞', '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.')],
        components: [],
        ephemeral: true
      });
    }
    
    // Find the selected category
    const categories = getPermissionCategories();
    const category = categories.find(cat => cat.name === categoryName);
    
    if (!category) {
      return await interaction.update({
        embeds: [createErrorEmbed('–û—à–∏–±–∫–∞', '–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')],
        components: [],
        ephemeral: true
      });
    }
    
    // Create an embed with the permissions in this category
    const embed = new EmbedBuilder()
      .setTitle(`üîí –ü—Ä–∞–≤–∞ —Ä–æ–ª–∏: ${role.name} - ${categoryName}`)
      .setColor(role.color || '#3498db')
      .setDescription(`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **${categoryName}** –¥–ª—è —Ä–æ–ª–∏ **${role.name}**\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∞.`)
      .setTimestamp();
    
    // Create buttons for each permission in the category
    const permissionRows = [];
    let currentRow = new ActionRowBuilder();
    let buttonCount = 0;
    
    for (const permission of category.permissions) {
      // Check if the role has this permission
      const hasPermission = role.permissions.has(PermissionsBitField.Flags[permission]);
      
      // Create a button for this permission
      const button = new ButtonBuilder()
        .setCustomId(`toggle_role_permission:${roleId}:${permission}`)
        .setLabel(getPermissionName(permission))
        .setStyle(hasPermission ? ButtonStyle.Success : ButtonStyle.Secondary)
        .setEmoji(hasPermission ? '‚úÖ' : '‚ùå');
      
      // Add the button to the current row
      currentRow.addComponents(button);
      buttonCount++;
      
      // If we've added 3 buttons to this row, start a new row
      if (buttonCount % 3 === 0) {
        permissionRows.push(currentRow);
        currentRow = new ActionRowBuilder();
      }
    }
    
    // Add the last row if it has any buttons
    if (currentRow.components.length > 0) {
      permissionRows.push(currentRow);
    }
    
    // Create a back button to return to role permissions management
    const backRow = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`manage_role_permissions:${roleId}`)
          .setLabel('–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø—Ä–∞–≤')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('‚óÄÔ∏è')
      );
    
    // Add the back row to the permission rows
    permissionRows.push(backRow);
    
    // Update the message with the new embed and components
    await interaction.update({
      embeds: [embed],
      components: permissionRows,
      ephemeral: true
    });
  } catch (error) {
    console.error('Error in rolePermissionsCategorySelect:', error);
    
    await interaction.update({
      embeds: [createErrorEmbed('–û—à–∏–±–∫–∞', `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–≤: ${error.message}`)],
      components: [
        new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId('view_roles')
              .setLabel('–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ä–æ–ª–µ–π')
              .setStyle(ButtonStyle.Secondary)
              .setEmoji('‚óÄÔ∏è')
          )
      ],
      ephemeral: true
    });
  }
}